#!/usr/bin/env python3
"""
Fixed BLE GATT Server with better error handling and diagnostics
Handles "GattManager1 interface not found" issues
"""

import dbus
import dbus.exceptions
import dbus.mainloop.glib
import dbus.service
import sys
import time
from gi.repository import GLib

# D-Bus service names and paths
BLUEZ_SERVICE_NAME = 'org.bluez'
GATT_MANAGER_IFACE = 'org.bluez.GattManager1'
DBUS_OM_IFACE = 'org.freedesktop.DBus.ObjectManager'
DBUS_PROP_IFACE = 'org.freedesktop.DBus.Properties'

GATT_SERVICE_IFACE = 'org.bluez.GattService1'
GATT_CHRC_IFACE = 'org.bluez.GattCharacteristic1'
GATT_DESC_IFACE = 'org.bluez.GattDescriptor1'

LE_ADVERTISING_MANAGER_IFACE = 'org.bluez.LEAdvertisingManager1'
LE_ADVERTISEMENT_IFACE = 'org.bluez.LEAdvertisement1'

class BLEServerError(Exception):
    pass

def diagnose_bluetooth_stack():
    """Diagnose common Bluetooth/BlueZ issues"""
    print("üîç Diagnosing Bluetooth stack...")
    
    try:
        bus = dbus.SystemBus()
    except Exception as e:
        raise BLEServerError(f"Cannot connect to D-Bus: {e}")
    
    # Check if BlueZ service is available
    try:
        bluez_obj = bus.get_object(BLUEZ_SERVICE_NAME, '/')
    except dbus.exceptions.DBusException as e:
        raise BLEServerError(f"BlueZ service not available: {e}\n"
                           "Try: sudo systemctl start bluetooth")
    
    # Get object manager
    try:
        remote_om = dbus.Interface(bluez_obj, DBUS_OM_IFACE)
        objects = remote_om.GetManagedObjects()
    except Exception as e:
        raise BLEServerError(f"Cannot get BlueZ objects: {e}")
    
    print(f"üìã Found {len(objects)} BlueZ objects:")
    
    adapters = []
    gatt_managers = []
    ad_managers = []
    
    for path, interfaces in objects.items():
        print(f"  {path}:")
        for interface in interfaces.keys():
            print(f"    - {interface}")
        
        if 'org.bluez.Adapter1' in interfaces:
            adapters.append(path)
            print(f"    ‚òÖ Bluetooth Adapter")
            
        if GATT_MANAGER_IFACE in interfaces:
            gatt_managers.append(path)
            print(f"    ‚òÖ GATT Manager")
            
        if LE_ADVERTISING_MANAGER_IFACE in interfaces:
            ad_managers.append(path)
            print(f"    ‚òÖ Advertising Manager")
    
    print(f"\nüìä Summary:")
    print(f"  Adapters: {len(adapters)}")
    print(f"  GATT Managers: {len(gatt_managers)}")
    print(f"  Advertising Managers: {len(ad_managers)}")
    
    if not adapters:
        raise BLEServerError("No Bluetooth adapters found!\n"
                           "Check: hciconfig, bluetoothctl list")
    
    if not gatt_managers:
        raise BLEServerError("No GATT managers found!\n"
                           "This usually means:\n"
                           "1. BlueZ experimental features not enabled\n"
                           "2. BlueZ version too old (need 5.43+)\n"
                           "3. Adapter doesn't support BLE\n\n"
                           "Fix: Enable experimental features:\n"
                           "sudo systemctl edit bluetooth.service\n"
                           "Add: ExecStart=/usr/lib/bluetooth/bluetoothd --experimental")
    
    # Check adapter status
    for adapter_path in adapters:
        try:
            adapter_props = dbus.Interface(
                bus.get_object(BLUEZ_SERVICE_NAME, adapter_path),
                DBUS_PROP_IFACE
            )
            props = adapter_props.GetAll('org.bluez.Adapter1')
            
            print(f"\nüîß Adapter {adapter_path}:")
            print(f"  Address: {props.get('Address', 'Unknown')}")
            print(f"  Name: {props.get('Name', 'Unknown')}")
            print(f"  Powered: {props.get('Powered', False)}")
            print(f"  Discoverable: {props.get('Discoverable', False)}")
            
            if not props.get('Powered', False):
                print(f"  ‚ö† Adapter is powered off!")
                try:
                    adapter_props.Set('org.bluez.Adapter1', 'Powered', dbus.Boolean(True))
                    print(f"  ‚úì Powered on adapter")
                except Exception as e:
                    print(f"  ‚úó Failed to power on: {e}")
                    
        except Exception as e:
            print(f"  ‚úó Error checking adapter {adapter_path}: {e}")
    
    return gatt_managers[0] if gatt_managers else None, ad_managers[0] if ad_managers else None

# Exception classes
class InvalidArgsException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.freedesktop.DBus.Error.InvalidArgs'

class NotSupportedException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.NotSupported'

class NotPermittedException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.NotPermitted'

class InvalidValueLengthException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.InvalidValueLength'

class FailedException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.Failed'

class Application(dbus.service.Object):
    def __init__(self, bus):
        self.path = '/'
        self.services = []
        dbus.service.Object.__init__(self, bus, self.path)

    def get_path(self):
        return dbus.ObjectPath(self.path)

    def add_service(self, service):
        self.services.append(service)

    @dbus.service.method(DBUS_OM_IFACE, out_signature='a{oa{sa{sv}}}')
    def GetManagedObjects(self):
        response = {}
        print("üìû GetManagedObjects called by BlueZ")
        
        for service in self.services:
            response[service.get_path()] = service.get_properties()
            chrcs = service.get_characteristics()
            for chrc in chrcs:
                response[chrc.get_path()] = chrc.get_properties()
                descs = chrc.get_descriptors()
                for desc in descs:
                    response[desc.get_path()] = desc.get_properties()
        
        print(f"üì§ Returning {len(response)} managed objects")
        return response

class Service(dbus.service.Object):
    PATH_BASE = '/org/bluez/example/service'

    def __init__(self, bus, index, uuid, primary):
        self.path = self.PATH_BASE + str(index)
        self.bus = bus
        self.uuid = uuid
        self.primary = primary
        self.characteristics = []
        dbus.service.Object.__init__(self, bus, self.path)

    def get_properties(self):
        return {
            GATT_SERVICE_IFACE: {
                'UUID': self.uuid,
                'Primary': self.primary,
                'Characteristics': dbus.Array(
                    self.get_characteristic_paths(),
                    signature='o')
            }
        }

    def get_path(self):
        return dbus.ObjectPath(self.path)

    def add_characteristic(self, characteristic):
        self.characteristics.append(characteristic)

    def get_characteristic_paths(self):
        result = []
        for chrc in self.characteristics:
            result.append(chrc.get_path())
        return result

    def get_characteristics(self):
        return self.characteristics

class Characteristic(dbus.service.Object):
    def __init__(self, bus, index, uuid, flags, service):
        self.path = service.path + '/char' + str(index)
        self.bus = bus
        self.uuid = uuid
        self.service = service
        self.flags = flags
        self.descriptors = []
        dbus.service.Object.__init__(self, bus, self.path)

    def get_properties(self):
        return {
            GATT_CHRC_IFACE: {
                'Service': self.service.get_path(),
                'UUID': self.uuid,
                'Flags': self.flags,
                'Descriptors': dbus.Array(
                    self.get_descriptor_paths(),
                    signature='o')
            }
        }

    def get_path(self):
        return dbus.ObjectPath(self.path)

    def add_descriptor(self, descriptor):
        self.descriptors.append(descriptor)

    def get_descriptor_paths(self):
        result = []
        for desc in self.descriptors:
            result.append(desc.get_path())
        return result

    def get_descriptors(self):
        return self.descriptors

    @dbus.service.method(GATT_CHRC_IFACE,
                        in_signature='a{sv}',
                        out_signature='ay')
    def ReadValue(self, options):
        print('Default ReadValue called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_CHRC_IFACE, in_signature='aya{sv}')
    def WriteValue(self, value, options):
        print('Default WriteValue called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_CHRC_IFACE)
    def StartNotify(self):
        print('Default StartNotify called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_CHRC_IFACE)
    def StopNotify(self):
        print('Default StopNotify called, returning error')
        raise NotSupportedException()

    @dbus.service.signal(DBUS_PROP_IFACE, signature='sa{sv}as')
    def PropertiesChanged(self, interface, changed, invalidated):
        pass

class TestService(Service):
    TEST_SVC_UUID = '12345678-1234-5678-1234-56789abcdef0'

    def __init__(self, bus, index):
        Service.__init__(self, bus, index, self.TEST_SVC_UUID, True)
        self.add_characteristic(TestCharacteristic(bus, 0, self))

class TestCharacteristic(Characteristic):
    TEST_CHRC_UUID = '12345678-1234-5678-1234-56789abcdef1'

    def __init__(self, bus, index, service):
        Characteristic.__init__(
            self, bus, index,
            self.TEST_CHRC_UUID,
            ['read', 'write', 'notify'],
            service)
        self.value = [dbus.Byte(ord(c)) for c in 'Hello BLE!']

    def ReadValue(self, options):
        value_str = ''.join(chr(byte) for byte in self.value)
        print(f'üìñ Read request: "{value_str}"')
        return self.value

    def WriteValue(self, value, options):
        value_str = ''.join(chr(byte) for byte in value)
        print(f'‚úèÔ∏è  Write request: "{value_str}"')
        self.value = value

class Advertisement(dbus.service.Object):
    PATH_BASE = '/org/bluez/example/advertisement'

    def __init__(self, bus, index, advertising_type):
        self.path = self.PATH_BASE + str(index)
        self.bus = bus
        self.ad_type = advertising_type
        self.service_uuids = None
        self.manufacturer_data = None
        self.solicit_uuids = None
        self.service_data = None
        self.local_name = None
        self.include_tx_power = False
        dbus.service.Object.__init__(self, bus, self.path)

    def get_properties(self):
        properties = dict()
        properties['Type'] = self.ad_type
        if self.service_uuids is not None:
            properties['ServiceUUIDs'] = dbus.Array(self.service_uuids, signature='s')
        if self.solicit_uuids is not None:
            properties['SolicitUUIDs'] = dbus.Array(self.solicit_uuids, signature='s')
        if self.manufacturer_data is not None:
            properties['ManufacturerData'] = dbus.Dictionary(self.manufacturer_data, signature='qv')
        if self.service_data is not None:
            properties['ServiceData'] = dbus.Dictionary(self.service_data, signature='sv')
        if self.local_name is not None:
            properties['LocalName'] = dbus.String(self.local_name)
        if self.include_tx_power is not None:
            properties['IncludeTxPower'] = dbus.Boolean(self.include_tx_power)
        return {LE_ADVERTISEMENT_IFACE: properties}

    def get_path(self):
        return dbus.ObjectPath(self.path)

    def add_service_uuid(self, uuid):
        if not self.service_uuids:
            self.service_uuids = []
        self.service_uuids.append(uuid)

    def add_local_name(self, name):
        self.local_name = name

    @dbus.service.method(LE_ADVERTISEMENT_IFACE, in_signature='', out_signature='')
    def Release(self):
        print(f'üì¢ Advertisement {self.path} released')

class TestAdvertisement(Advertisement):
    def __init__(self, bus, index):
        Advertisement.__init__(self, bus, index, 'peripheral')
        self.add_service_uuid(TestService.TEST_SVC_UUID)
        self.add_local_name('TestServer')
        self.include_tx_power = True

def register_ad_cb():
    print('‚úÖ Advertisement registered successfully')

def register_ad_error_cb(error):
    print(f'‚ùå Failed to register advertisement: {error}')

def register_app_cb():
    print('‚úÖ GATT application registered successfully')

def register_app_error_cb(error):
    print(f'‚ùå Failed to register GATT application: {error}')
    print("\nCommon fixes:")
    print("1. Check if experimental features are enabled")
    print("2. Verify user is in bluetooth group: groups $USER")
    print("3. Check D-Bus permissions in /etc/dbus-1/system.d/")

def main():
    print("üöÄ Starting BLE GATT Server...")
    
    # Set up D-Bus main loop
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    
    try:
        # Diagnose the Bluetooth stack
        gatt_manager_path, ad_manager_path = diagnose_bluetooth_stack()
        
        if not gatt_manager_path:
            raise BLEServerError("No GATT manager available")
            
        if not ad_manager_path:
            print("‚ö†Ô∏è  No advertising manager found - advertisements won't work")
        
        # Connect to D-Bus
        bus = dbus.SystemBus()
        
        # Get GATT manager
        print(f"üì° Using GATT manager at: {gatt_manager_path}")
        service_manager = dbus.Interface(
            bus.get_object(BLUEZ_SERVICE_NAME, gatt_manager_path),
            GATT_MANAGER_IFACE
        )
        
        # Get advertising manager (if available)
        ad_manager = None
        if ad_manager_path:
            print(f"üì∫ Using advertising manager at: {ad_manager_path}")
            ad_manager = dbus.Interface(
                bus.get_object(BLUEZ_SERVICE_NAME, ad_manager_path),
                LE_ADVERTISING_MANAGER_IFACE
            )
        
        # Create application and services
        app = Application(bus)
        app.add_service(TestService(bus, 0))
        
        print("üîß Created GATT application with test service")
        print(f"   Service UUID: {TestService.TEST_SVC_UUID}")
        print(f"   Characteristic UUID: {TestCharacteristic.TEST_CHRC_UUID}")
        
        # Register GATT application
        print("üìã Registering GATT application...")
        service_manager.RegisterApplication(app.get_path(), {},
                                          reply_handler=register_app_cb,
                                          error_handler=register_app_error_cb)
        
        # Register advertisement (if possible)
        advertisement = None
        if ad_manager:
            advertisement = TestAdvertisement(bus, 0)
            print("üì¢ Registering advertisement...")
            ad_manager.RegisterAdvertisement(advertisement.get_path(), {},
                                           reply_handler=register_ad_cb,
                                           error_handler=register_ad_error_cb)
        
        print("\nüéâ BLE GATT Server is running!")
        print("üì± Use a BLE scanner app to connect")
        print("üîç Look for device: 'TestServer'")
        print("‚èπÔ∏è  Press Ctrl+C to stop")
        
        # Run main loop
        mainloop = GLib.MainLoop()
        try:
            mainloop.run()
        except KeyboardInterrupt:
            print("\nüõë Shutting down...")
            
            # Clean up
            if ad_manager and advertisement:
                try:
                    ad_manager.UnregisterAdvertisement(advertisement.get_path())
                    print("‚úÖ Advertisement unregistered")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Error unregistering advertisement: {e}")
            
            try:
                service_manager.UnregisterApplication(app.get_path())
                print("‚úÖ GATT application unregistered")
            except Exception as e:
                print(f"‚ö†Ô∏è  Error unregistering application: {e}")
                
    except BLEServerError as e:
        print(f"‚ùå BLE Server Error: {e}")
        sys.exit(1)
    except dbus.exceptions.DBusException as e:
        print(f"‚ùå D-Bus Error: {e}")
        print("\nTroubleshooting steps:")
        print("1. sudo systemctl restart bluetooth")
        print("2. Run the troubleshooting script first")
        print("3. Check if user is in bluetooth group: groups $USER")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
